<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- 数据源 -->
	<!-- <bean id="dataSourcejndi" class="org.springframework.jndi.JndiObjectFactoryBean" 
		p:jndiName="imsdatasource"/> -->
	<bean id="agentDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${db.driverClassName}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${database.connection.idle}" />
		<property name="minIdle" value="${database.connection.min}" />
		<property name="maxActive" value="${database.connection.max}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="${db.testsql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
		<property name="breakAfterAcquireFailure" value="false" /> <!-- 自动重连接 -->
		<!-- 配置监控统计拦截的filters -->
		<!-- <property name="filters" value="stat" /> -->
	</bean>

	<bean id="dynamicDataSource" class="com.allcam.datasource.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="agentDataSource" key="agentDataSource"></entry>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="agentDataSource">
		</property>
	</bean>


	<bean id="daoAdvice" class="com.allcam.datasource.DaoAdviser">
		<property name="map">
			<map>
				<entry key="agentDataSource">
					<value>com.allcam.daoall.agent.dao</value>
				</entry>
			</map>
		</property>
	</bean>

	<!-- 数据库切换aop配置 -->
	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.allcam.daoall.agent.dao..*.*(..))"
			advice-ref="daoAdvice" order="100" />
	</aop:config>

	<!-- scan for mappers and let them be autowired -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="org.mybatis.jpetstore.persistence" />
	</bean>

	<!-- 数据源Base定义 -->
	<!-- 默认数据源 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
		p:dataSource-ref="dynamicDataSource" p:nativeJdbcExtractor-ref="nativeJdbcExtractor" />
	<!-- 国际化资源文件 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource"
		p:useCodeAsDefaultMessage="true">
		<property name="basenames">
			<list>
				<!-- 默认加载的资源文件在src目录下或其他classpath下 -->
				<value>classpath:properties/errMessage</value>
				<value>classpath:properties/messages</value>
				<value>classpath:properties/common</value>
			</list>
		</property>
	</bean>
	<tx:annotation-driven />
	<bean id="nativeJdbcExtractor" lazy-init="true"
		class="org.springframework.jdbc.support.nativejdbc.SimpleNativeJdbcExtractor" />
	<bean id="lobHandler" lazy-init="true"
		class="org.springframework.jdbc.support.lob.OracleLobHandler">
		<property name="nativeJdbcExtractor">
			<ref bean="nativeJdbcExtractor" />
		</property>
	</bean>
</beans>